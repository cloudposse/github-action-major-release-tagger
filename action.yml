name: "Major Release Tagger GitHub Action"
description: "Major Release Tagger GitHub Action"
author: hello@cloudposse.com
branding:
  icon: "file"
  color: "white"
inputs:
  log-level:
    description: "Log level for this action. Available options: ['off', 'error', 'warn', 'info', 'debug']. Default 'info'"
    required: false
    default: "info"
outputs:
  response:
    description: 'Response in json format for example: {"succeeded":true,"reason":"MAPPED_TAGS","message":"Successfully created/update v-tags.","data":{"v1": {"state":"updated", "oldSHA": "d9b3a3034766ac20294fd1c36cacc017ae4a3898", "newSHA":"e5c6309b473934cfe3e556013781b8757c1e0422"}, "v2": {"state":"created", "oldSHA": "bbf9f924752c61dcef084757bcf4440e23f2e16b", "newSHA":"5ae37ee514b73cf8146fe389ad839469e7f3a6d2"}}}'
    value: ${{ steps.run_tagger.outputs.response }}
runs:
  using: "composite"
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Setup Git Config
      shell: bash
      run: |
        git config --global user.name 'actions-bot'
        git config --global user.email 'actions-bot@users.noreply.github.com'

    - name: Install Node Dependencies
      shell: bash
      run: |
        cd ${{ github.action_path }}
        npm install

    # - name: Run Major Release Tagger
    #   shell: bash
    #   id: run_tagger
    #   env:
    #     LOG_LEVEL: '${{ inputs.log-level }}'
    #   run: |
    #     cd ${{ github.action_path }}
    #     node ./${{ github.action_path }}/index.js $GITHUB_WORKSPACE

    - name: Run Major Release Tagger
      uses: actions/github-script@v6
      id: run_tagger
      env:
        LOG_LEVEL: '${{ inputs.log-level }}'
      with:
        script: |
          const REPO_PATH = process.env.GITHUB_WORKSPACE;
          console.log(`Repo Path: ${REPO_PATH}`);
          console.log(`Action Path: ${{github.action_path}}`);
          const { main } = require(${{github.action_path}} + '/src/app.js');

          console.log(`Repo Path: ${REPO_PATH}`);

          main(REPO_PATH)
            .then((response) => {
              if (response.succeeded) {
                core.setOutput('response', JSON.stringify(response));
              } else {
                core.setFailed(response.message);
              }
            })
            .catch((error) => {
              core.setFailed(error);
            });
