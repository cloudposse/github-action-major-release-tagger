name: "Major Release Tagger GitHub Action"
description: "Major Release Tagger GitHub Action"
author: hello@cloudposse.com
branding:
  icon: "file"
  color: "white"
inputs:
  token:
    description: "GitHub token"
    required: true
    default: ${{ github.server_url == 'https://github.com' && github.token || '' }}
  log-level:
    description: "Log level for this action. Available options: ['off', 'error', 'warn', 'info', 'debug']. Default 'info'"
    required: false
    default: "info"
  node-env:
    description: "Node environment. Default 'production'"
    required: false
    default: "production"
  git-user-name:
    description: "Git user name that will be used for git config"
    required: false
    default: "actions-bot"
  git-user-email:
    description: "Git user email that will be used for git config"
    required: false
    default: "actions-bot@users.noreply.github.com"
  dry-run:
    description: "Run action without pushing changes to upstream"
    required: false
    default: "false"
outputs:
  response:
    description: 'Response in json format for example: {"succeeded":true,"reason":"MAPPED_TAGS","message":"Successfully created/update v-tags.","data":{"v1": {"state":"updated", "oldSHA": "d9b3a3034766ac20294fd1c36cacc017ae4a3898", "newSHA":"e5c6309b473934cfe3e556013781b8757c1e0422"}, "v2": {"state":"created", "oldSHA": "bbf9f924752c61dcef084757bcf4440e23f2e16b", "newSHA":"5ae37ee514b73cf8146fe389ad839469e7f3a6d2"}}}'
    value: ${{ steps.run_tagger.outputs.response }}
runs:
  using: "composite"
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: '${{ inputs.token }}'

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: 20
        token: '${{ inputs.token }}'

    - name: Setup Git Config
      shell: bash
      run: |
        git config --global user.name '${{ inputs.git-user-name }}'
        git config --global user.email '${{ inputs.git-user-email }}'

    - name: Install Node Dependencies
      shell: bash
      working-directory: ${{ github.action_path }}
      run: npm install

    - name: Run Major Release Tagger
      uses: actions/github-script@v6
      id: run_tagger
      env:
        LOG_LEVEL: '${{ inputs.log-level }}'
        GITHUB_ACTION_PATH: '${{github.action_path}}'
        WORKING_DIRECTORY: '${{ github.workspace }}'
        DRY_RUN: '${{ inputs.dry-run }}'
        GITHUB_TOKEN: '${{inputs.token}}'
        NODE_ENV: '${{ inputs.node-env }}'
      with:
        script: |
          const { main } = require(process.env.GITHUB_ACTION_PATH + '/src/app.js');

          const dryRun = JSON.parse(process.env.DRY_RUN);

          main(process.env.WORKING_DIRECTORY, !dryRun)
            .then((response) => {
              if (response.succeeded) {
                core.setOutput('response', JSON.stringify(response));
              } else {
                core.setFailed(response.message);
              }
            })
            .catch((error) => {
              core.setFailed(error);
            });
